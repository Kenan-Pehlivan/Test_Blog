version: '3.8'

services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: blog_web
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      # Sync your entire project for development
      - .:/var/www/html
      # Separate volume for uploaded images to persist data
      - blog_images:/var/www/html/assets/images
      # Exclude vendor to use container's optimized version
      - /var/www/html/vendor
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_NAME=blog_db
      - DB_USER=blog_user
      - DB_PASSWORD=blog_password_2024
      - PHP_MEMORY_LIMIT=256M
      - UPLOAD_MAX_FILESIZE=10M
      - POST_MAX_SIZE=10M
    networks:
      - blog_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: mysql:8.0
    container_name: blog_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password_2024
      MYSQL_DATABASE: blog_db
      MYSQL_USER: blog_user
      MYSQL_PASSWORD: blog_password_2024
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - blog_db_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/sample-data.sql:/docker-entrypoint-initdb.d/02-sample-data.sql
    networks:
      - blog_network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "blog_user", "-pblog_password_2024"]
      interval: 10s
      timeout: 5s
      retries: 5

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: blog_phpmyadmin
    restart: unless-stopped
    ports:
      - "8081:80"
    environment:
      PMA_HOST: db
      PMA_USER: blog_user
      PMA_PASSWORD: blog_password_2024
      MYSQL_ROOT_PASSWORD: root_password_2024
      PMA_ARBITRARY: 1
    depends_on:
      db:
        condition: service_healthy
    networks:
      - blog_network

volumes:
  blog_db_data:
    driver: local
  blog_images:
    driver: local

networks:
  blog_network:
    driver: bridge